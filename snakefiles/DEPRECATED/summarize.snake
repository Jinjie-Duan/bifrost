rule script__summarize_read_stats:
    input:
        reads = ({R1}, {R2}),
        trimmed_reads = ("reads/trimmed_R1.fastq.gz", "reads/trimmed_R2.fastq.gz"),
        normalized_reads = ("reads/normalized_R1.fastq.gz", "reads/normalized_R2.fastq.gz")
    output:
        read_stats_yaml = "summaries/read_stats.yaml"
    run:
        all_reads = [input.reads, input.trimmed_reads, input.normalized_reads]
        serum.script__summarize_read_stats(all_reads, output.read_stats_yaml)


rule script__summarize_kraken_report:
    input:
        kraken_report = "contamination/kraken_report.txt"
    output:
        contamination_reads_yaml = "summaries/contamination_reads.yaml"
    run:
        serum.script__summarize_kraken_report(input.kraken_report, output.contamination_reads_yaml)


rule script__summarize_depth:
    input:
        depth = "mapping/contigs.depth"
    output:
        contig_depth_yaml = "summaries/contig_depth.yaml",
        binned_depth_yaml = "summaries/binned_depth.yaml"
    run:
        serum.script__summarize_depth(input.depth, output.contig_depth_yaml, output.binned_depth_yaml)


rule script__summarize_spades_log:
    input:
        spades_log = "log/spades.log"
    output:
        insert_deviation_yaml = "summaries/insert_deviation.yaml"
    run:
        serum.script__summarize_spades_log(input.spades_log, output.insert_deviation_yaml)


rule script__summarize_pilon_vcf:
    input:
        pilon_log = "variant_calling/contigs.vcf"
    output:
        pilon_yaml = "summaries/ambiguous_snp.yaml"
    run:
        serum.script__summarize_pilon_vcf(input.pilon_log, output.pilon_yaml)


rule script__summarize_kraken_contigs:
    input:
        kraken_contigs = "contamination/kraken_contigs.txt"
    output:
        contamination_contigs_yaml = "summaries/contamination_contigs.yaml"
    run:
        serum.script__summarize_kraken_contigs(input.kraken_contigs, output.contamination_contigs_yaml)


rule script__summarize_quast_report:
    input:
        quast_report = "quast/report.tsv"
    output:
        assembly_yaml = "summaries/assembly.yaml"
    run:
        serum.script__summarize_quast_report(input.quast_report, output.assembly_yaml)


rule script__summarize_summaries_to_serum:
    input:
        ["summaries/assembly.yaml",
         "summaries/contamination_contigs.yaml",
         "summaries/insert_deviation.yaml",
         "summaries/ambiguous_snp.yaml",
         "summaries/binned_depth.yaml",
         "summaries/contig_depth.yaml",
         "summaries/contamination_reads.yaml",
         "summaries/read_stats.yaml"]
    output:
        serumqc_info_yaml = "summaries/serumqc_info.yaml"
    run:
        serum.script__summarize_summaries_to_serum(input, output.serumqc_info_yaml)
