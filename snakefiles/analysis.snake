import re
import pandas
import ruamel.yaml

import pkg_resources
import sys
sys.path.append(os.path.join(os.path.dirname(workflow.snakefile), "../"))

import lib.serum as serum

configfile: os.path.join(os.path.dirname(workflow.snakefile), "../config/config.yaml")
# requires --config R1_reads={read_location},R2_reads={read_location}
sample = config["Sample"]
R1 = config["R1_reads"],
R2 = config["R2_reads"],

yaml = ruamel.yaml.YAML(typ='safe')
yaml.default_flow_style = False
with open(sample, "r") as yaml_stream:
    config_sample = yaml.load(yaml_stream)

folder_name = "analysis"
# my understanding is all helps specify final output
onsuccess:
    print("Workflow complete")
    output = ["analysis_status.txt"]
    with open(output[0], "w") as status:
        status.write("Success\n")
onerror:
    print("Workflow error")
    output = ["analysis_status.txt"]
    with open(output[0], "w") as status:
        status.write("Failure\n")

rule all:
    input:
        folder_name,
        os.path.join(folder_name, "ariba_resfinder_report.tsv"),
        os.path.join(folder_name, "ariba_plasmidfinder_report.tsv"),
        os.path.join(folder_name, "ariba_mlst_report.tsv"),
        os.path.join(folder_name, "species.cmd")


rule setup:
    output:
        dir = folder_name
    shell:
        "mkdir {output}"


rule check_species_processes_to_run:
    input:
        dir = folder_name
    output:
        species = os.path.join(folder_name, "species.cmd")
    run:
        with open(output.species, "w") as output:
            output.write(config_sample["sample"]["species"] + "\n")


rule ariba__resfinder:
    message:
        "Running step: {rule}"
    input:
        dir = folder_name,
        reads = (R1, R2)
    output:
        resfinder = os.path.join(folder_name, "ariba_resfinder"),
        resfinder_report = os.path.join(folder_name, "ariba_resfinder_report.tsv")
    log:
        os.path.join(folder_name, "ariba__resfinder.log")
    shell:
        """
        ariba run /srv/data/DB/ariba/resfinder {input.reads[0]} {input.reads[1]} {output.resfinder} --noclean &> {log}
        mv {output.resfinder}/report.tsv {output.resfinder_report}
        """


rule ariba__plasmidfinder:
    message:
        "Running step: {rule}"
    input:
        dir = folder_name,
        reads = (R1, R2)
    output:
        plasmidfinder = os.path.join(folder_name, "ariba_plasmidfinder"),
        plasmidfinder_report = os.path.join(folder_name, "ariba_plasmidfinder_report.tsv")
    log:
        os.path.join(folder_name, "ariba__plasmidfinder.log")
    shell:
        """
        ariba run /srv/data/DB/ariba/plasmidfinder {input.reads[0]} {input.reads[1]} {output.plasmidfinder} --noclean &> {log}
        mv {output.plasmidfinder}/report.tsv {output.plasmidfinder_report}
        """


rule ariba__mlst:
    message:
        "Running step: {rule}"
    input:
        dir = folder_name,
        reads = (R1, R2)
    output:
        mlst = os.path.join(folder_name, "ariba_mlst"),
        mlst_report = os.path.join(folder_name, "ariba_mlst_report.tsv")
    log:
        os.path.join(folder_name, "ariba__mlst.log")
    shell:
        """
        ariba run /srv/data/DB/ariba/mlst/Staphylococcus_aureus/ref_db/ {input.reads[0]} {input.reads[1]} {output.mlst} --noclean &> {log}
        mv {output.mlst}/mlst_report.tsv {output.mlst_report}
        """
