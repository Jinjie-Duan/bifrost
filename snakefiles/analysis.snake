import re
import pandas
from ruamel.yaml import YAML
import sys


configfile: os.path.join(os.path.dirname(workflow.snakefile), "../config.yaml")
# requires --config R1_reads={read_location},R2_reads={read_location}
sample = config["Sample"]
R1 = config["R1_reads"],
R2 = config["R2_reads"],
global_threads = config["global"]["threads"]
global_memory_in_GB = config["global"]["memory"]

yaml = YAML(typ='safe')
yaml.default_flow_style = False
with open(sample, "r") as yaml_stream:
    config_sample = yaml.load(yaml_stream)


# my understanding is all helps specify final output
onsuccess:
    print("Workflow complete")
    output = ["analysis_status.txt"]
    with open(output[0], "w") as status:
        status.write("Success\n")
onerror:
    print("Workflow error")
    output = ["analysis_status.txt"]
    with open(output[0], "w") as status:
        status.write("Failure\n")


# ruleorder: setup > ariba__mlst > ariba__resfinder > abricate_on_ariba_resfinder > ariba__plasmidfinder > abricate_on_ariba_plasmidfinder


rule all:
    input:
        "analysis/ariba_mlst",
        "analysis/abricate_on_resfinder_from_ariba.tsv",
        "analysis/abricate_on_plasmidfinder_from_ariba.tsv"


rule setup:
    output:
        folder = "analysis"
    shell:
        "mkdir {output}"


rule ariba__resfinder:
    message:
        "Running step: {rule}"
    input:
        folder = "analysis",
        reads = (R1, R2)
    output:
        folder = "analysis/ariba_resfinder",
    threads:
        global_threads
    resources:
        memory_in_GB = global_memory_in_GB
    log:
        "analysis/log/ariba__resfinder.log"
    benchmark:
        "analysis/benchmarks/ariba__resfinder.benchmark"
    shell:
        "ariba run /srv/data/DB/ariba/resfinder {input.reads[0]} {input.reads[1]} {output.folder} --tmp_dir /scratch &> {log}"


rule check__ariba_resfinder:
    message:
        "Running step: {rule}"
    input:
        folder = "analysis/ariba_resfinder",
    output:
        check_file = "analysis/ariba_resfinder/check.txt",
        contigs = "analysis/ariba_resfinder/assemblies.fa.gz",
    threads:
        global_threads
    resources:
        memory_in_GB = global_memory_in_GB
    log:
        "analysis/log/check__ariba_resfinder.log"
    benchmark:
        "analysis/benchmarks/check__ariba_resfinder.benchmark"
    run:
        if(os.path.isfile(os.path.join(input.folder, "assemblies.fa.gz"))):
            shell("touch analysis/abricate_on_resfinder_from_ariba.tsv")
            shell("touch {output.check_file}")
        else:
            shell("touch {input.folder}/assemblies.fa.gz")
            shell("touch {output.check_file}")


rule abricate_on_ariba_resfinder:
    message:
        "Running step: {rule}"
    input:
        contigs = "analysis/ariba_resfinder/assemblies.fa.gz",
    output:
        report = "analysis/abricate_on_resfinder_from_ariba.tsv",
    params:
        database = "/srv/data/DB/abricate/",
        db_name = "resfinder_db",
    threads:
        global_threads
    resources:
        memory_in_GB = global_memory_in_GB
    log:
        "analysis/log/abricate_on_ariba_resfinder.log"
    benchmark:
        "analysis/benchmarks/abricate_on_ariba_resfinder.benchmark"
    run:
        if not os.path.isfile(output.report):
            shell("abricate --datadir {params.database} --db {params.db_name} {input.contigs} > {output.report} &> {log}")


rule ariba__plasmidfinder:
    message:
        "Running step: {rule}"
    input:
        folder = "analysis",
        reads = (R1, R2)
    output:
        folder = "analysis/ariba_plasmidfinder",
    threads:
        global_threads
    resources:
        memory_in_GB = global_memory_in_GB
    log:
        "analysis/log/ariba__plasmidfinder.log"
    benchmark:
        "analysis/benchmarks/ariba__plasmidfinder.benchmark"
    shell:
        "ariba run /srv/data/DB/ariba/plasmidfinder {input.reads[0]} {input.reads[1]} {output.folder} --tmp_dir /scratch &> {log}"


rule check__ariba_plasmidfinder:
    message:
        "Running step: {rule}"
    input:
        folder = "analysis/ariba_plasmidfinder"
    output:
        check_file = "analysis/ariba_plasmidfinder/check.txt",
        contigs = "analysis/ariba_plasmidfinder/assemblies.fa.gz"
    threads:
        global_threads
    resources:
        memory_in_GB = global_memory_in_GB
    log:
        "analysis/log/check__ariba_plasmidfinder.log"
    benchmark:
        "analysis/benchmarks/check__ariba_plasmidfinder.benchmark"
    run:
        if(os.path.isfile(os.path.join(input.folder, "assemblies.fa.gz"))):
            print("touch analysis/abricate_on_plasmidfinder_from_ariba.tsv")
            shell("touch {output.check_file}")
        else:
            shell("touch {input.folder}/assemblies.fa.gz")
            shell("touch {output.check_file}")


rule abricate_on_ariba_plasmidfinder:
    message:
        "Running step: {rule}"
    input:
        contigs = "analysis/ariba_plasmidfinder/assemblies.fa.gz",
    output:
        report = "analysis/abricate_on_plasmidfinder_from_ariba.tsv",
    params:
        database = "/srv/data/DB/abricate/",
        db_name = "plasmidfinder_db",
    threads:
        global_threads
    resources:
        memory_in_GB = global_memory_in_GB
    log:
        "analysis/log/abricate_on_ariba_plasmidfinder.log"
    benchmark:
        "analysis/benchmarks/abricate_on_ariba_plasmidfinder.benchmark"
    run:
        if not os.path.isfile(output.report):
            shell("abricate --datadir {params.database} --db {params.db_name} {input.contigs} > {output.report} &> {log}")


rule ariba__mlst:
    message:
        "Running step: {rule}"
    input:
        folder = "analysis",
        reads = (R1, R2)
    output:
        folder = "analysis/ariba_mlst",
    threads:
        global_threads
    resources:
        memory_in_GB = global_memory_in_GB
    log:
        "analysis/log/ariba__mlst.log"
    benchmark:
        "analysis/benchmarks/ariba__mlst.benchmark"
    run:
        if os.path.isfile("species.txt"):
            with open("species.txt", "r") as species_file:
                species = species_file.read().strip().replace(" ", "_")
                if os.path.isdir("/srv/data/DB/ariba/mlst/" + species + "/ref_db"):
                    shell("ariba run /srv/data/DB/ariba/mlst/" + species + "/ref_db/ {input.reads[0]} {input.reads[1]} {output.folder} --tmp_dir /scratch &> {log}")
